#!/bin/sh
# Displays a big "InkBox" splash from the initrd userspace

DEVICE=$(cat /opt/device)
PROGRESS_BAR=0
DISPLAY_DEBUG=0
DEVELOPER_SPLASH=0
[ "${1}" == "progress_bar_init" ] && PROGRESS_BAR=1
[ "${1}" == "display_debug" ] && DISPLAY_DEBUG=1
[ "${1}" == "developer_splash" ] && DEVELOPER_SPLASH=1

setup() {
	CHROOT_DIR="/splash"
	[ ${PROGRESS_BAR} == 1 ] && CHROOT_DIR="/splash_progress_bar"
	[ ${DISPLAY_DEBUG} == 1 ] && CHROOT_DIR="/splash_display_debug"
	[ ${DEVELOPER_SPLASH} == 1 ] && CHROOT_DIR="/splash_developer"
	mkdir -p "${CHROOT_DIR}"
	cd "${CHROOT_DIR}"
	tar -xf /opt/splash-rootfs.tar.xz
	cd - &>/dev/null

	cp /bin/busybox "${CHROOT_DIR}/bin/busybox"
	mount -t devtmpfs devtmpfs "${CHROOT_DIR}/dev"
	mount -t sysfs sysfs "${CHROOT_DIR}/sys"
	mount -t proc proc "${CHROOT_DIR}/proc"
}

cleanup() {
	umount "${CHROOT_DIR}/dev" -l -f &>/dev/null
	umount "${CHROOT_DIR}/sys" -l -f &>/dev/null
	umount "${CHROOT_DIR}/proc" -l -f &>/dev/null
	rm -rf "${CHROOT_DIR}" &>/dev/null
}

calculate() {
        result=$(awk "BEGIN { print "$*" }")
        printf "%.0f\n" ${result}
}

print_progress() {
	PERCENTAGE=${1}
	echo "true" > /run/print_busy

	if [ ! -z ${2} ]; then
		if [ "${DEVICE}" != "n236" ] && [ "${DEVICE}" != "n437" ] && [ "${DEVICE}" != "n306" ] && [ "${DEVICE}" != "kt" ] && [ "${DEVICE}" != "n873" ] && [ "${DEVICE}" != "n418" ]; then
			LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -s top=$(calculate ${viewHeight}/2+${viewHeight}/8),left=$(calculate ${viewWidth}/4),width=$(calculate ${viewWidth}/2),height=$(calculate ${HEIGHT_FACTOR}*100/${viewHeight}*100) -W GC16 -D ORDERED -w &>/dev/null
			LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -s top=$(calculate ${viewHeight}/2+${viewHeight}/8+2),left=$(calculate ${viewWidth}/4+2),width=$(calculate ${viewWidth}/2-4),height=$(calculate ${HEIGHT_FACTOR}*100/${viewHeight}*100-4) -W GC16 -D ORDERED -H -w &>/dev/null
		else
			LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -s top=$(calculate ${viewHeight}/2+${viewHeight}/8),left=$(calculate ${viewWidth}/4),width=$(calculate ${viewWidth}/2),height=$(calculate ${HEIGHT_FACTOR}*100/${viewHeight}*100) -W GC16 -D ORDERED -H -w &>/dev/null
			LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -s top=$(calculate ${viewHeight}/2+${viewHeight}/8+2),left=$(calculate ${viewWidth}/4+2),width=$(calculate ${viewWidth}/2-4),height=$(calculate ${HEIGHT_FACTOR}*100/${viewHeight}*100-4) -W GC16 -D ORDERED -w &>/dev/null
		fi
	fi

	if [ "${DEVICE}" != "n236" ] && [ "${DEVICE}" != "n437" ] && [ "${DEVICE}" != "n306" ] && [ "${DEVICE}" != "kt" ] && [ "${DEVICE}" != "n873" ] && [ "${DEVICE}" != "n418" ]; then
		LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -s top=$(calculate ${viewHeight}/2+${viewHeight}/8),left=$(calculate ${viewWidth}/4),width=$(calculate ${viewWidth}/4/2*4*${PERCENTAGE}/100),height=$(calculate ${HEIGHT_FACTOR}*100/${viewHeight}*100) -W GC16 -D ORDERED -w &>/dev/null
	else
		LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -s top=$(calculate ${viewHeight}/2+${viewHeight}/8),left=$(calculate ${viewWidth}/4),width=$(calculate ${viewWidth}/4/2*4*${PERCENTAGE}/100),height=$(calculate ${HEIGHT_FACTOR}*100/${viewHeight}*100) -W GC16 -D ORDERED -H -w &>/dev/null
	fi
	echo "false" > /run/print_busy
}

print_qr() {
	eval $(LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -e)
	cd /splash/tmp

	# For some reason, `qr-to-png' randomly fails on older devices and needs to be run multiple times to actually work
	command="env IMGSIZE=$(calculate ${viewWidth}/3) STRING=${1} /opt/bin/qr-to-png"
	while true; do if ${command}; then break; fi; done &>/dev/null

	if [ "${2}" == "invert" ]; then
		LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -qhb -g file=/tmp/out.png,halign=CENTER,valign=TOP,y=60
		LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -qhb -g file=/tmp/out.png,halign=CENTER,valign=BOTTOM,y=-50
	else
		LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -qb -g file=/tmp/out.png,halign=CENTER,valign=TOP,y=60
		LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -qb -g file=/tmp/out.png,halign=CENTER,valign=BOTTOM,y=-50
	fi
	rm -f /splash/tmp/out.png &>/dev/null
}

if [ "${DEVICE}" == "n705" ] || [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ] || [ "${DEVICE}" == "kt" ]; then
        ROW=30
	ALERT_ROW=18
	HEIGHT_FACTOR=1.8
elif [ "${DEVICE}" == "n613" ] || [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n306" ]; then
        ROW=37
	ALERT_ROW=24
	HEIGHT_FACTOR=2.44140625
elif [ "${DEVICE}" == "n873" ] || [ "${DEVICE}" == "n418" ]; then
        ROW=30
	ALERT_ROW=18
	HEIGHT_FACTOR=5
elif [ "${DEVICE}" == "n437" ] || [ "${DEVICE}" == "n249" ]; then
	ROW=35
	ALERT_ROW=23
	HEIGHT_FACTOR=4.5
else
	ROW=30
	ALERT_ROW=18
	HEIGHT_FACTOR=1.8
fi

if [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ] || [ "${DEVICE}" == "n613" ] || [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n437" ] || [ "${DEVICE}" == "n306" ] || [ "${DEVICE}" == "n249" ] || [ "${DEVICE}" == "kt" ]; then
	SIZE=70
elif [ "${DEVICE}" == "n705" ]; then
	SIZE=55
elif [ "${DEVICE}" == "n873" ] || [ "${DEVICE}" == "n418" ]; then
	SIZE=90
else
	SIZE=70
fi

if [ "${DEVICE}" == "n705" ] || [ "${DEVICE}" == "n905b" ] || [ "${DEVICE}" == "n905c" ] || [ "${DEVICE}" == "n613" ] || [ "${DEVICE}" == "n236" ] || [ "${DEVICE}" == "n437" ] || [ "${DEVICE}" == "n306" ] || [ "${DEVICE}" == "n249" ]; then
	FB_UR=3
elif [ "${DEVICE}" == "n418" ]; then
	FB_UR=1
elif [ "${DEVICE}" == "n873" ]; then
	FB_UR=0
elif [ "${DEVICE}" == "kt" ]; then
	FB_UR=1
else
	FB_UR=3
fi

if [ ! -z ${UPDATE_SPLASH_PID} ]; then
	kill -9 ${UPDATE_SPLASH_PID}
	cleanup
	setup
else
	setup
fi

echo ${FB_UR} > /sys/class/graphics/fb0/rotate

if [ "${1}" == "update_splash" ]; then
	ln -s /bin/busybox /splash/bin/sh
	ln -s /bin/busybox /splash/bin/sleep
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink "-k" "-f" "-h" "-q"
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink "-t" "regular=/opt/fbink/inter-b.ttf,size=20" "Updating" "-m" "-M" "-h" "-q"
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/bin/update-splash "${ROW}" &>/dev/null &
elif [ "${1}" == "progress_bar_init" ]; then
	ln -s /bin/busybox "${CHROOT_DIR}/bin/sh"
	mkfifo /run/progress_bar_fifo
	eval $(LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -e)
	BOUNDARY_DRAWING_DONE=0
	echo "false" > /run/print_busy
	while true; do
		if [ ! -z "${QUEUE}" ]; then
			while true; do
				if [ $(cat /run/print_busy) != "true" ]; then
					PERCENTAGE="${QUEUE%%:*}"
					QUEUE="${QUEUE#*:}"
					print_progress "${PERCENTAGE}" &
					break
				fi
			done
		fi

		if read line < /run/progress_bar_fifo; then
			if [ "${line}" != "stop" ]; then
				if [ $(cat /run/print_busy) != "true" ]; then
					if [ "${BOUNDARY_DRAWING_DONE}" == 0 ]; then
						BOUNDARY_DRAWING_DONE=1
						print_progress "${line}" 1 &
					else
						print_progress "${line}" &
					fi
				else
					QUEUE="${QUEUE}${line}:"
				fi
			else
				rm /run/progress_bar_fifo
				cleanup
				break
			fi
			sleep 0.1
		fi
	done &>/dev/null
elif [ "${1}" == "display_debug" ]; then
	ln -s /bin/busybox "${CHROOT_DIR}/bin/sh"
	ln -s /bin/busybox "${CHROOT_DIR}/bin/cat"
	touch "${CHROOT_DIR}/run/serial-fifo"
	mount --bind /tmp/serial-fifo "${CHROOT_DIR}/run/serial-fifo"
	chroot "${CHROOT_DIR}" /usr/bin/inkvt.armhf --no-timeout -f tewi -c "/usr/bin/serial-debug"
elif [ "${1}" == "alert_splash" ]; then
	if [ "${3}" == "flag" ]; then
		mkdir -p /boot-part
		mount -t ext4 /dev/mmcblk0p1 /boot-part
		echo "true" > /boot-part/flags/BOOT_USB_DEBUG && sync
		umount -l -f /boot-part
		rm -rf /boot-part
	fi
	ln -s /bin/busybox /splash/bin/sh
	ln -s /bin/busybox /splash/bin/cat
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -bqk
	/opt/bin/alert-ascii.sh /splash/alert.ascii "${2}"
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /bin/sh "-c" "cat /alert.ascii | /opt/fbink/fbink -qbm -y ${ALERT_ROW}"
	print_qr "https://inkbox.ddns.net/wiki/index.php?title=Boot_error_codes#${2}"
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -qs
elif [ "${1}" == "developer_splash" ]; then
	while true; do
		LD_LIBRARY_PATH=/opt/fbink busybox chroot "${CHROOT_DIR}" /opt/fbink/fbink -qmy 2 "█ █ █ █ Developer mode █ █ █ █"
		sleep 30
	done
elif [ "${1}" == "dfl" ]; then
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink "-t" "regular=/opt/fbink/inter-b.ttf,size=40" "DFL" -qbmMhc
	print_qr "https://inkbox.ddns.net/wiki/index.php?title=Direct_Firmware_Loader_mode" invert
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -qs
elif [ "${1}" == "usb_debug" ]; then
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink "-t" "regular=/opt/fbink/inter-b.ttf,size=30" "USB Debug" -qbmhMc
	print_qr "https://inkbox.ddns.net/wiki/index.php?title=Boot-time_USB_debug_mode" invert
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -qs
elif [ "${1}" == "refresh" ]; then
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink -k -f
else
	LD_LIBRARY_PATH=/opt/fbink busybox chroot /splash /opt/fbink/fbink "-cMmq" "-t" "regular=/opt/fbink/fraunces.ttf,size=${SIZE}" "InkBox"
fi

if [ "${1}" != "update_splash" ] && [ "${1}" != "progress_bar_init" ] && [ "${1}" != "display_debug" ]; then
	cleanup
fi
